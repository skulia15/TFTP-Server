TRIVIAL FTP

Overview:
-Transfer begins with a request to read or write, also serves to read a connection
-If server grants the request the connection is opened.
-File is sent in fixed length blocks of 512 bytes
-Each data packet is contains 1 block of data.
-Each data packet must be acknowledged by an acknowledgement packet before the next packet can be sent.
-Termination of transfer when datapacket of length less than 512 bytes.
- If a packet gets lost in the network, the intended recipient will timeout and may retransmit his last packet (data or an acknowledgment) causing the sender of the lost packet to retransmit that lost packet
-sender has to keep just one packet on hand for retransmission
-both machines involved in a transfer are considered senders and receivers
-A sends data and receives acknowledgments
 B sends acknowledgments and receives data.
-An error is signalled by sending an error packet
-This packet is not acknowledged, and not retransmitted (i.e., a TFTP server or user may terminate after sending an error message)

TFTP header consists of a 2 byte opcode field which indicates
the packet's type (e.g., DATA, ERROR, etc.)

-Each end of the connection chooses a TID for itself
-The TID's chosen for a connection should be randomly chosen
-Every packet has associated with it the two TID's of the ends of the connection, the source TID and the destination TID.

 1. Host A sends  a  "WRQ"  to  host  B  with  source=  A's  TID, destination= 69.

2. Host  B  sends  a "ACK" (with block number= 0) to host A with
 source= B's TID, destination= A's TID.

             2 bytes     string    1 byte     string   1 byte
            ------------------------------------------------
           | Opcode |  Filename  |   0  |    Mode    |   0  |
            ------------------------------------------------

                       Figure 5-1: RRQ/WRQ packet
file name is a sequence of bytes in
netascii terminated by a zero byte. The mode field contains the
string "netascii", "octet", or "mail" 
-A host which receives netascii mode data must translate the data to its own format.

Test server with client: tftp 127.0.0.1 myport -c get example_data1